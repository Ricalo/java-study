/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'ricalo' at '2/26/17 12:30 AM' with Gradle 2.10
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.10/userguide/tutorial_java_projects.html
 */

plugins {
    id "org.gradle.java"
    id "com.scuilion.syntastic" version "0.3.8"
    id 'findbugs'
    id 'nebula.lint' version '8.3.1'
    id 'pmd'
    id 'checkstyle'
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
// Code coverage plugin for Java
apply plugin: 'jacoco'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'
    compile 'org.checkerframework:checker-qual:2.1.10'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

tasks.withType(FindBugs) {
    ignoreFailures = true
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

gradleLint.rules = ['all-dependency']

pmd {
//  ignoreFailures = true
//  sourceSets = [sourceSets.main]
//  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = [
    'java-basic',
    'java-braces',
    'java-clone',
    'java-codesize',
    'java-comments',
    'java-controversial',
    'java-coupling',
    'java-design',
    'java-empty',
    'java-finalizers',
    'java-imports',
    'java-j2ee',
    'java-javabeans',
    'java-junit',
    'java-logging-jakarta-commons',
    'java-logging-java',
    'java-migrating',
    'java-naming',
    'java-optimizations',
    'java-strictexception',
    'java-strings',
    'java-sunsecure',
    'java-typeresolution',
    'java-unnecessary',
    'java-unusedcode'
  ]
}

tasks.withType(Checkstyle) {
    ignoreFailures = true
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

checkstyle {
    configFile = rootProject.file('google_checks.xml')
    toolVersion '8.3'
}
